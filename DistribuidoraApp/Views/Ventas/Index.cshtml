@model IEnumerable<Negocio.entidades.Venta>
@using Microsoft.AspNet.Identity;
@using DistribuidoraAPI.Extensions;

@{
    if (User.Identity.GetPerfilId() == "3")//Preventista
    {
        ViewBag.Title = "Listado de Pedidos";
    }
    else
    {
        ViewBag.Title = "Listado de Ventas";
    }

}



<div class="row">
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-12">
                @if (User.Identity.GetPerfilId() == "3")//Preventista
                {
                    <h2>Listado de Pedidos</h2>
                    <hr />
                    <p>
                        @Html.ActionLink("Crear Nuevo Pedido", "Create", null, new { @class = "btn btn-outline btn-primary pull-left" })
                        @Html.ActionLink("Volver al Inicio", "Index", "Home", null, new { @class = "btn btn-outline btn-warning pull-right" })
                    </p>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-6"><h2>Listado de Ventas</h2></div>
                        <div class="col-md-6">
                            @Html.ActionLink("Volver al Inicio", "Index", "Home", null, new { @class = "btn btn-outline btn-warning pull-right" })
                            @Html.ActionLink("Crear Nueva Venta", "Create", null, new { @class = "btn btn-outline btn-success pull-right" })
                            @Html.ActionLink("Recargar Página", "Index", null, new { @class = "btn btn-outline btn-primary pull-right" })
                        </div>
                    </div>
                }

            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    @using (Ajax.BeginForm("IndexBusqueda", "Ventas", null, new AjaxOptions
                    {
                        HttpMethod = "POST",
                        OnBegin = "onBeginSubmit",
                        OnComplete = "onCompleteSubmit",
                        OnFailure = "onFailureResult",
                        OnSuccess = "onSuccessResult",
                        UpdateTargetId = "divTable",
                        InsertionMode = InsertionMode.Replace
                    }, new { id = "AjaxForm" }))
                    {
                        <div class="card-header">Filtros</div>
                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="control-label">Rango de Fechas</label>
                                        <div id="reportrange"
                                             style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc">
                                            <i class="fa fa-calendar"></i>&nbsp;
                                            <span></span> <i class="fa fa-caret-down"></i>
                                            <input type="hidden" id="txtFechas" name="fechas" value="" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @Html.Label("Preventista", "Preventista", htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownList("PreventistaId", null, "Seleccionar...", htmlAttributes: new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        @Html.Label("Cliente", "Cliente", htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownList("ClienteId", null, "Seleccionar...", htmlAttributes: new { @class = "form-control select2" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        @Html.Label("Estado", "Estado", htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownList("EstadoId", null, "Seleccionar...", htmlAttributes: new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @Html.Label("Cajero", "Cajero/a", htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownList("CajeroId", null, "Seleccionar...", htmlAttributes: new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer  d-flex justify-content-center">
                            <div class="row  d-flex justify-content-center">
                                <input type="submit" id="btnBuscar" class="btn btn-outline-success" value="Buscar" />
                            </div>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="table-responsive" id="divTable">
            @Html.Partial("_Index", Model)
        </div>
    </div>
</div>


@section scripts {

    <script type="text/javascript">

        $(document).ready(function () {
           
            //crearTabla(true);

            //$('#cboCantidad').change(function () {
            //    var value = $(this).val();
            //    crearTabla(value);

            //});


        });

        var mensaje = '@ViewBag.mensaje';
        var tipoMensaje = '@ViewBag.tipoMensaje';
        var facturaAPI = '@ViewBag.facturaAPI';
        var mensajeFactura = '@ViewBag.mensajeFactura';
        var conFactura = '@ViewBag.conFactura';
        

        if (tipoMensaje != '') {
            Swal.fire({
                position: 'top-end',
                icon: tipoMensaje,
                title: mensaje,
                showConfirmButton: false,
                timer: 2500
            }).then((result) => {
                if (conFactura === "true") {
                    if (facturaAPI != '') {
                        //Quiere decir que se genero correctamente la factura.
                        Swal.fire({
                            title: '<strong>Factura Generada</strong>',
                            icon: 'success',
                            html:
                                'Puede abrirla desde acá, ' +
                                '<a target="_blank" href="https://app.ifactura.com.ar/Factura/ImprimirExterno/' + facturaAPI + '">Ver Factura</a>',
                            showCloseButton: true,
                            focusConfirm: false,
                            confirmButtonText: 'Ok'
                        }).then((result) => {
                            window.location = '@Url.Action("Index")';
                        });
                    } else {
                        Swal.fire({
                            position: 'center',
                            icon: 'error',
                            title: 'Oops.. La Factura no se generó',
                            html: mensajeFactura
                        }).then((result) => {
                            window.location = '@Url.Action("Index")';
                        });
                    }
                } else {
                    window.location = '@Url.Action("Index")';
                }
            });
        }




        function mensajeSinFactura() {
            Swal.fire({
                position: 'center',
                icon: 'error',
                title: 'Oops...',
                text: 'La venta no tiene factura generada'
            });
        }

        function calcularPorcentaje(input) {
            console.log(input)
        }

        function crearTabla(cant) {
            $("#divTable").hide();

            $("#preloader").fadeIn(5);

            var url = '@(Url.Action("GetVentasFiltro", "Ventas", null, Request.Url.Scheme))';
                console.log(url);
                $("#divTable").load(url, function (response, status, xhr) {
                    console.log("aca se creo la tabla");
                    $("#divTable").show();
                    $("#preloader").fadeOut("slow");
                    if (status == "error") {
                        switch (xhr.status) {
                            case 408:
                                console.log(xhr.statusText, "Advertencia.");
                        }
                        return;
                    } else {
                        reloadDatatable();
                    }
                });
        }

        function onBeginSubmit() {
            $("#preloader").fadeIn(5);
        }
        function onCompleteSubmit() {
            $("#preloader").fadeOut("slow");
            reloadDatatable();
        }

        function onFailureResult() { }
        function onSuccessResult() { }

        function accionVenta(id, tipo, formaPago, cliente) {
            $.ajax({
                url: "@(Url.Action("EstadoConfirm"))",
                type: "POST",
                beforeSend: function () {
                    $("#preloader").fadeIn(5);
                },
                complete: function () {
                    $("#preloader").fadeOut("slow");
                },
                data: {
                    id: id, tipo: tipo, formaPago: formaPago, cliente: cliente
                },
                success: function (data) {
                    console.log(data);
                    $("#modalDatos").modal('hide');
                    Swal.fire({
                        position: 'top-end',
                        icon: data.icon,
                        title: data.Message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then((result) => {
                        $('#AjaxForm').submit();
                        if (data.tipo === "Preparacion") {
                            Swal.fire({
                                title: 'Generar detalle?',
                                text: "Si no genera el detalle ahora, podrá hacerlo después!",
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Sí, Generarlo!',
                                cancelButtonText: 'No'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    generarDetalle(id);
                                }
                            })
                        }
                        else if (data.tipo == "Despachado") {
                            Swal.fire({
                                title: 'Generar remito?',
                                text: "Si no genera el remito ahora, podrá hacerlo después!",
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Sí, Generarlo!',
                                cancelButtonText: 'No'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    generarRemito(id);
                                }
                            });
                        }
                        else if (data.tipo == "Completada") {
                            console.log(formaPago);
                            if (formaPago == 2 || formaPago == 3) {
                                generarFactura(id);

                            } else {
                                Swal.fire({
                                    title: 'Generar factura?',
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Sí, Generarla!',
                                    cancelButtonText: 'No'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        generarFactura(id);
                                    }
                                })
                            }

                        }
                    });

                    console.log(data.tipo);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Ocurrió un Error!',
                        text: errorThrown
                    });
                }
            });
        }

        function generarFactura(id) {
            $.ajax({
                url: "@(Url.Action("GenerarFactura", "Ventas"))",
                type: "POST",
                beforeSend: function () {
                    $("#preloader").fadeIn(5);
                },
                complete: function () {
                    $("#preloader").fadeOut("slow");
                },
                data: { id: id },
                success: function (data) {
                    console.log(data);
                    if (data.Success === "True") {
                        Swal.fire({
                            title: '<strong>Factura Generada</strong>',
                            icon: 'success',
                            html:
                                'Puede abrirla desde acá, ' +
                                '<a target="_blank" href="https://app.ifactura.com.ar/Factura/ImprimirExterno/' + data.facturaAPI + '">Ver Factura</a>',
                            showCloseButton: true,
                            focusConfirm: false,
                            confirmButtonText: 'Ok'
                        }).then((result) => {
                            $('#AjaxForm').submit();
                        })
                    } else {
                         Swal.fire({
                            position: 'center',
                            icon: 'error',
                            title: 'Oops.. La Factura no se generó',
                            html: data.mensajeFactura
                         }).then((result) => {
                             $('#AjaxForm').submit();
                         })
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Ocurrió un Error! No se pudo obtener las formas de pago',
                        text: errorThrown
                    }).then((result) => {
                        $('#AjaxForm').submit();
                    })
                }
            });
        }

        function getFormasPago(id, tipo, cliente) {
            $.ajax({
                url: "@(Url.Action("GetFormasPago", "Ventas"))",
                type: "GET",
                beforeSend: function () {
                    $("#preloader").fadeIn(5);
                },
                complete: function () {
                    $("#preloader").fadeOut("slow");
                },
                success: function (data) {
                    console.log(data);
                    var json = JSON.parse(data);
                    seleccionarTipoCobro(json, id, tipo, cliente);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Ocurrió un Error! No se pudo obtener las formas de pago',
                        text: errorThrown
                    });
                }
            });
        }

        function seleccionarTipoCobro(cobros, id, tipo, cliente) {

            Swal.fire({
                title: 'Seleccionar la Forma de Pago',
                input: 'select',
                inputOptions: cobros,
                showCancelButton: true
            }).then((result) => {
                if (result.value) {
                    accionVenta(id, tipo, result.value, cliente);
                    //Swal.fire('You selected ' + result.value)
                }
            })
        }

        function getClientes(id, tipo) {
            $.ajax({
                url: "@(Url.Action("GetClientesCombo", "Clientes"))",
                type: "GET",
                beforeSend: function () {
                    $("#preloader").fadeIn(5);
                },
                complete: function () {
                    $("#preloader").fadeOut("slow");
                },
                success: function (data) {
                    console.log(data);
                    var json = JSON.parse(data);
                    seleccionarCliente(json, id, tipo);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Ocurrió un Error! No se pudieron obtener los clientes',
                        text: errorThrown
                    });
                }
            });
        }

        function seleccionarCliente(clientes, id, tipo) {

            Swal.fire({
                title: 'Seleccionar el Cliente',
                input: 'select',
                inputOptions: clientes,
                showCancelButton: true
            }).then((result) => {
                if (result.value) {
                    getFormasPago(id, tipo, result.value);
                }
            })
        }

        function generarRemito(ventaId) {

            window.location.href = '@Url.Action("Create", "Remitos")' + '?VentaId=' + ventaId;

        }

        function generarDetalle(ventaId) {

            window.location.href = '@Url.Action("ReportePedido", "Ventas")' + '?id=' + ventaId;

        }

        function calularComision(total) {
            Swal.fire({
                title: 'El total del preventista es: $' + total,
                icon: 'info',
                showCancelButton: false,
                confirmButtonText: 'Ok',
                showLoaderOnConfirm: true
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Ingresar en Porcentaje, la comisión (%)',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Calcular',
                        showLoaderOnConfirm: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            if (!isNumeric(result.value)) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Debe ingresar una cantidad válida!'
                                });
                            } else {
                                var resultado = total * (result.value / 100);
                                Swal.fire({
                                    icon: 'success',
                                    title: 'La Comisión es de: $' + resultado.toString()
                                });
                            }
                        }
                    });
                }
            });
        }
      

        $(function () {


            moment.locale('es');
            var start = moment().subtract(1, 'days');
            var end = moment();

            function cb(start, end) {
                $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
                $('#txtFechas').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
            }


            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,

                ranges: {
                    'Hoy': [moment(), moment()],
                    'Ayer': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Últimos 7 Días': [moment().subtract(6, 'days'), moment()],
                    'Últimos 30 Días': [moment().subtract(29, 'days'), moment()],
                    'Este Mes': [moment().startOf('month'), moment().endOf('month')],
                    'Último Mes': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                },
                "locale": {
                    "format": "MM/DD/YYYY",
                    "separator": " - ",
                    "applyLabel": "Aplicar",
                    "cancelLabel": "Cancelar",
                    "fromLabel": "De",
                    "toLabel": "Até",
                    "customRangeLabel": "Personalizado",
                    "daysOfWeek": [
                        "Dom",
                        "Lun",
                        "Mar",
                        "Mier",
                        "Jue",
                        "Vie",
                        "Sáb"
                    ],
                    "monthNames": [
                        "Enero",
                        "Febrero",
                        "Marzo",
                        "Abril",
                        "Mayo",
                        "Junio",
                        "Julio",
                        "Agosto",
                        "Septiembre",
                        "Octubre",
                        "Noviembre",
                        "Diciembre"
                    ],
                    "firstDay": 0
                }
            }, cb);

            cb(start, end);

        });
    </script>

}